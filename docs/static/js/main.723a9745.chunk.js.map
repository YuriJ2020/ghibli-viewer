{"version":3,"sources":["store/faveSlice.js","store/services/ghibliApi.js","store/store.js","components/CategoryDropDownMenu.jsx","components/SortDropDownMenu.jsx","components/SearchBar.jsx","assets/totoro-logo.png","components/HomeLogo.jsx","components/FavedItem.jsx","components/FaveSideBar.jsx","components/NavBar.jsx","assets/totoro.gif","components/Loading.jsx","components/MovieDetails.jsx","components/Fave.jsx","components/MovieCard.jsx","components/MovieGrid.jsx","assets/not-found.gif","components/NotFound.jsx","switch/index.js","App.js","index.js"],"names":["faveSlice","createSlice","name","initialState","show","faves","reducers","open","state","close","reset","action","total","payload","initial","Array","from","length","_v","i","id","fave","flip","mid","target","_","find","actions","selectShow","selectFaveCount","selectFavedMovieIds","favedMovies","filter","item","map","ghibliApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getMovieById","query","getAllCategories","searchMovies","keyword","cid","url","params","categoryId","useGetMovieByIdQuery","useGetAllCategoriesQuery","useSearchMoviesQuery","store","configureStore","reducer","faveReducer","middleware","getDefaultMiddleware","concat","setupListeners","dispatch","CategoryDropDownMenu","history","useHistory","initialCategoryID","path","lastSlash","lastIndexOf","substring","parseInt","categoryIdFromPath","useLocation","pathname","useState","categoryID","setCategoryID","categories","data","isLoading","error","style","backgroundColor","category","get","categoryIdToName","message","categoryEventHandler","push","onClick","SortDropDownMenu","s","location","sortCodeFromParam","URLSearchParams","search","sortCode","setSortCode","createEventHandlerFromSortCode","sortByRankEventHandler","newestFirstEventHandler","oldestFirstEventHandler","rank","newest","oldest","DivS","styled","div","MDBInputS","MDBInput","SearchBar","setSearch","label","type","value","onChange","e","HomeLogo","src","TotoroPNG","height","alt","FavedItem","props","movie","useDispatch","detailsPath","className","to","maxWidth","profileImage","title","releaseYear","director","FaveSideBar","useSelector","favedMovieIds","MDBIconS","MDBIcon","icon","size","color","around","Offcanvas","onHide","placement","Header","closeButton","Title","Body","MDBNavbarItemS","MDBNavbarItem","NavBar","showNav","setShowNav","children","expand","dark","fluid","aria-expanded","aria-label","fas","navbar","navBarWithSwitch","CustomSwitch","ImgS","img","Loading","totoroGIF","DivStyled","posterImage","MovieDetails","useParams","lg","description","runningTime","videoId","trailer","youtubeVideoId","opts","width","playerVars","autoplay","onReady","pauseVideo","Fave","selectFave","MovieCard","summary","rippleColor","rippleTag","whiteSpace","MovieGrid","iteratee","order","movies","sort","faveCount","orderBy","md","sm","NotFound","NotFoundGIF","exact","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.723a9745.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport _ from 'lodash';\r\n\r\nexport const faveSlice = createSlice({\r\n  name: 'faveSlice',\r\n  initialState: { show: false, faves: [] },\r\n  reducers: {\r\n    open: (state) => {\r\n      state.show = true;\r\n    },\r\n    close: (state) => {\r\n      state.show = false;\r\n    },\r\n    reset: (state, action) => {\r\n      // get a payload of total\r\n      const total = action.payload;\r\n      // create Array instance\r\n      const initial = Array.from({ length: total }, (_v, i) => ({ id: i, fave: false }));\r\n      state.faves = initial;\r\n    },\r\n    flip: (state, action) => {\r\n      const mid = action.payload;\r\n      const target = _.find(state.faves, { id: mid }) ?? { id: mid, fave: false }; // null coalescing operator\r\n      target.fave = !target.fave;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { open, close, flip, reset } = faveSlice.actions;\r\n\r\nexport const selectShow = (state) => state.faveSlice.show;\r\n\r\nexport const selectFave = (id) => (state) => _.find(state.faveSlice.faves, { id });\r\n\r\nexport const selectFaveCount = (state) => state.faveSlice.faves.length;\r\n\r\nexport const selectFavedMovieIds = (state) => {\r\n  const favedMovies = _.filter(state.faveSlice.faves, (item) => item.fave);\r\n  return _.map(favedMovies, (item) => item.id);\r\n};\r\n\r\nexport default faveSlice.reducer;\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\n// Define a service using a base URL and expected endpoints\r\nexport const ghibliApi = createApi({\r\n  reducerPath: 'ghibliApi',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://quote-me-on-ghibli.herokuapp.com' }),\r\n  endpoints: (builder) => ({\r\n    getMovieById: builder.query({\r\n      query: (mid) => `/movie/${mid}`,\r\n    }),\r\n\r\n    getAllCategories: builder.query({\r\n      query: () => '/category/all',\r\n    }),\r\n\r\n    searchMovies: builder.query({\r\n      query: ({ keyword, cid }) => ({\r\n        url: keyword || cid ? '/movie/search' : '/movie/all',\r\n        params: keyword || cid ? { keyword, categoryId: cid } : null,\r\n      }),\r\n    }),\r\n  }),\r\n});\r\n\r\n// Export hooks for usage in functional components, which are\r\n// auto-generated based on the defined endpoints\r\nexport const { useGetMovieByIdQuery, useGetAllCategoriesQuery, useSearchMoviesQuery } = ghibliApi;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport faveReducer from './faveSlice';\r\n\r\nimport { setupListeners } from '@reduxjs/toolkit/query';\r\nimport { ghibliApi } from './services/ghibliApi';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    faveSlice: faveReducer,\r\n    // Add the generated reducer as a specific top-level slice\r\n    [ghibliApi.reducerPath]: ghibliApi.reducer,\r\n  },\r\n  // Adding the api middleware enables caching, invalidation, polling,\r\n  // and other useful features of `rtk-query`.\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(ghibliApi.middleware),\r\n});\r\n\r\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\r\n// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\r\nsetupListeners(store.dispatch);\r\n","import React, { useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport _ from 'lodash';\r\n\r\nimport { MDBDropdownMenu, MDBDropdownItem, MDBDropdownLink, MDBDropdownToggle, MDBDropdown } from 'mdb-react-ui-kit';\r\n\r\nimport { useGetAllCategoriesQuery } from '../store/services/ghibliApi';\r\n\r\nconst categoryIdFromPath = (path) => {\r\n  const lastSlash = path.lastIndexOf('/');\r\n  const cid = path.substring(lastSlash + 1);\r\n  return _.parseInt(cid);\r\n};\r\n\r\nconst CategoryDropDownMenu = () => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const initialCategoryID = categoryIdFromPath(location.pathname);\r\n\r\n  const [categoryID, setCategoryID] = useState(initialCategoryID);\r\n\r\n  const createCategoryEventHandlerFromID = (cid) => {\r\n    const eventHandler = () => {\r\n      setCategoryID(cid);\r\n      history.push({ pathname: `/ghibli-viewer/category/${cid}` });\r\n    };\r\n    return eventHandler;\r\n  };\r\n\r\n  const { data: categories, isLoading, error } = useGetAllCategoriesQuery();\r\n\r\n  const categoryIdToName = (cid) => {\r\n    const category = _.find(categories, { id: cid });\r\n    return _.get(category, 'name', 'Categories');\r\n  };\r\n\r\n  return (\r\n    <MDBDropdown>\r\n      <MDBDropdownToggle style={{ backgroundColor: '#26A69A' }}>{categoryIdToName(categoryID)}</MDBDropdownToggle>\r\n      <MDBDropdownMenu>\r\n        {isLoading ? (\r\n          <p>Loading...</p>\r\n        ) : error ? (\r\n          <p>{error?.message}</p>\r\n        ) : (\r\n          categories.map(({ id, name }) => {\r\n            const categoryEventHandler = createCategoryEventHandlerFromID(id);\r\n            return (\r\n              <MDBDropdownItem key={id}>\r\n                <MDBDropdownLink onClick={categoryEventHandler}>{name}</MDBDropdownLink>\r\n              </MDBDropdownItem>\r\n            );\r\n          })\r\n        )}\r\n      </MDBDropdownMenu>\r\n    </MDBDropdown>\r\n  );\r\n};\r\n\r\nexport default CategoryDropDownMenu;\r\n","import React, { useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport _ from 'lodash';\r\n\r\nimport { MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBDropdownLink } from 'mdb-react-ui-kit';\r\n\r\nconst SortDropDownMenu = () => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const sortCodeFromParam = searchParams.get('sort');\r\n\r\n  const [sortCode, setSortCode] = useState(sortCodeFromParam);\r\n\r\n  const createEventHandlerFromSortCode = (s) => {\r\n    const eventHandler = () => {\r\n      setSortCode(s);\r\n      history.push({ search: `?sort=${s}` });\r\n    };\r\n    return eventHandler;\r\n  };\r\n\r\n  const sortByRankEventHandler = createEventHandlerFromSortCode('rank');\r\n  const newestFirstEventHandler = createEventHandlerFromSortCode('newest');\r\n  const oldestFirstEventHandler = createEventHandlerFromSortCode('oldest');\r\n\r\n  // What's higher order function?\r\n  // - HOF is a function that returns / creates a function.\r\n  //\r\n  // Why is higher order function needed?\r\n  // - To improve code reusability.\r\n\r\n  // If 'handleSort' were not created:\r\n  //\r\n  // const handleSortByRank = () => {\r\n  //   setSort(s);\r\n  //   console.log(`sort: ${s}`);\r\n  //   history.push({ search: '?sort=rank' });\r\n  // }\r\n\r\n  // const handleSortByNewest = () => {\r\n  //   setSort(s);\r\n  //   console.log(`sort: ${s}`);\r\n  //   history.push({ search: '?sort=newest' });\r\n  // }\r\n\r\n  // const handleSortByOldest = () => {\r\n  //   setSort(s);\r\n  //   console.log(`sort: ${s}`);\r\n  //   history.push({ search: '?sort=oldest' });\r\n  // }\r\n\r\n  const sortCodeToTitle = (s) => {\r\n    const dict = {\r\n      rank: 'By Rank',\r\n      newest: 'Newest First',\r\n      oldest: 'Oldest First',\r\n    };\r\n    return _.get(dict, s, 'Sort By');\r\n  };\r\n\r\n  return (\r\n    <MDBDropdown>\r\n      <MDBDropdownToggle style={{ backgroundColor: '#26A69A' }}>{sortCodeToTitle(sortCode)}</MDBDropdownToggle>\r\n      <MDBDropdownMenu>\r\n        <MDBDropdownItem>\r\n          <MDBDropdownLink onClick={sortByRankEventHandler}>By Rank</MDBDropdownLink>\r\n        </MDBDropdownItem>\r\n        <MDBDropdownItem>\r\n          <MDBDropdownLink onClick={newestFirstEventHandler}>By Release Year (Newest First)</MDBDropdownLink>\r\n        </MDBDropdownItem>\r\n        <MDBDropdownItem>\r\n          <MDBDropdownLink onClick={oldestFirstEventHandler}>By Release Year (Oldest First)</MDBDropdownLink>\r\n        </MDBDropdownItem>\r\n      </MDBDropdownMenu>\r\n    </MDBDropdown>\r\n  );\r\n};\r\n\r\nexport default SortDropDownMenu;\r\n","import React, { useState } from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { MDBInput } from 'mdb-react-ui-kit';\r\n\r\nconst DivS = styled.div`\r\n  @media (min-width: 992px) {\r\n    padding-right: 5rem;\r\n  }\r\n`;\r\n\r\nconst MDBInputS = styled(MDBInput)`\r\n  @media (min-width: 992px) {\r\n    margin: 0 4rem;\r\n  }\r\n`;\r\n\r\nconst SearchBar = () => {\r\n  const [search, setSearch] = useState('');\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <DivS>\r\n      <MDBInputS\r\n        label='Search'\r\n        id='typeText'\r\n        type='text'\r\n        value={search}\r\n        onChange={(e) => {\r\n          setSearch(e.target.value);\r\n          history.push(`/ghibli-viewer/search/${e.target.value}`);\r\n        }}\r\n      />\r\n    </DivS>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","export default __webpack_public_path__ + \"static/media/totoro-logo.ea15bd29.png\";","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { MDBNavbarBrand } from 'mdb-react-ui-kit';\r\n\r\nimport TotoroPNG from '../assets/totoro-logo.png';\r\n\r\nconst HomeLogo = () => {\r\n  const history = useHistory();\r\n\r\n  const handleClick = () => {\r\n    history.push({ pathname: '/ghibli-viewer' });\r\n  };\r\n\r\n  return (\r\n    <MDBNavbarBrand onClick={handleClick}>\r\n      <img src={TotoroPNG} height='60' alt='Totoro Icon' />\r\n      <strong>Studio Ghibli Collection</strong>\r\n    </MDBNavbarBrand>\r\n  );\r\n};\r\n\r\nexport default HomeLogo;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { close } from '../store/faveSlice';\r\n\r\nimport { useGetMovieByIdQuery } from '../store/services/ghibliApi';\r\nimport { MDBCard, MDBBtn } from 'mdb-react-ui-kit';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst FavedItem = (props) => {\r\n  const { id } = props;\r\n  const { data: movie, error, isLoading } = useGetMovieByIdQuery(id);\r\n\r\n  const dispatch = useDispatch();\r\n  const handleClose = () => dispatch(close());\r\n\r\n  const detailsPath = `/ghibli-viewer/movie/${id}`;\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <>\r\n          <p>Loading Movie {id}...</p>\r\n        </>\r\n      ) : error ? (\r\n        <p>{error.data.message}</p>\r\n      ) : (\r\n        <>\r\n          <div className='d-flex align-items-center'>\r\n            <Link to={detailsPath}>\r\n              <MDBCard style={{ maxWidth: '12rem' }}>\r\n                <img src={movie.profileImage} alt={movie.title} />\r\n              </MDBCard>\r\n            </Link>\r\n            <div className='py-2 px-2'>\r\n              <p className='font-weight-bold'>{movie.title}</p>\r\n              <p>{movie.releaseYear}</p>\r\n              <p>{movie.director}</p>\r\n              <Link to={detailsPath}>\r\n                <MDBBtn style={{ backgroundColor: '#9FD9D0' }} onClick={handleClose}>\r\n                  Watch Details\r\n                </MDBBtn>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n          <hr className='m-0' />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FavedItem;\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { Offcanvas } from 'react-bootstrap';\r\nimport { MDBIcon } from 'mdb-react-ui-kit';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectFavedMovieIds, selectShow, open, close } from '../store/faveSlice';\r\n\r\nimport FavedItem from './FavedItem';\r\n\r\nconst FaveSideBar = () => {\r\n  const dispatch = useDispatch();\r\n  const show = useSelector(selectShow);\r\n\r\n  const handleShow = () => dispatch(open());\r\n  const handleClose = () => dispatch(close());\r\n\r\n  const favedMovieIds = useSelector(selectFavedMovieIds);\r\n\r\n  const MDBIconS = styled(MDBIcon)`\r\n    cursor: pointer;\r\n    &:hover {\r\n      transform: scale(1.2);\r\n      transition-duration: 0.2s;\r\n    }\r\n  `;\r\n\r\n  return (\r\n    <>\r\n      <MDBIconS icon='heart' size='3x' className='ms-4' style={{ color: '#C5585F' }} onClick={handleShow} around />\r\n      <Offcanvas show={show} onHide={handleClose} placement='end'>\r\n        <Offcanvas.Header style={{ backgroundColor: '#3AA7A0' }} closeButton>\r\n          <Offcanvas.Title className='text-white'>Your Faves List</Offcanvas.Title>\r\n        </Offcanvas.Header>\r\n        <Offcanvas.Body className='p-0'>\r\n          {favedMovieIds.map((mid) => (\r\n            <div key={mid}>\r\n              <FavedItem id={mid} />\r\n            </div>\r\n          ))}\r\n        </Offcanvas.Body>\r\n      </Offcanvas>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FaveSideBar;\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { Offcanvas } from 'react-bootstrap';\r\n\r\nimport {\r\n  MDBContainer,\r\n  MDBNavbar,\r\n  MDBNavbarItem,\r\n  MDBNavbarToggler,\r\n  MDBIcon,\r\n  MDBCollapse,\r\n  MDBNavbarNav,\r\n} from 'mdb-react-ui-kit';\r\n\r\nimport CategoryDropDownMenu from './CategoryDropDownMenu';\r\nimport SortDropDownMenu from './SortDropDownMenu';\r\nimport SearchBar from './SearchBar';\r\nimport HomeLogo from './HomeLogo';\r\nimport FaveSideBar from './FaveSideBar';\r\n\r\nconst MDBNavbarItemS = styled(MDBNavbarItem)`\r\n  @media (min-width: 992px) {\r\n    padding-left: 3rem;\r\n    padding-right: 1rem;\r\n  }\r\n`;\r\n\r\nconst NavBar = (props) => {\r\n  const [showNav, setShowNav] = useState(false);\r\n  // offCanvas\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const { children } = props;\r\n\r\n  return (\r\n    <>\r\n      <BrowserRouter>\r\n        <MDBNavbar expand='lg' dark style={{ backgroundColor: '#3AA7A0' }}>\r\n          <MDBContainer className='px-5 py-2' fluid>\r\n            <HomeLogo />\r\n            <MDBNavbarToggler\r\n              type='button'\r\n              aria-expanded='false'\r\n              aria-label='Toggle navigation'\r\n              onClick={() => setShowNav(!showNav)}\r\n            >\r\n              <MDBIcon icon='bars' fas />\r\n            </MDBNavbarToggler>\r\n            <MDBCollapse navbar show={showNav}>\r\n              <MDBNavbarNav>\r\n                <MDBNavbarItemS>\r\n                  <CategoryDropDownMenu />\r\n                </MDBNavbarItemS>\r\n                <MDBNavbarItem>\r\n                  <SortDropDownMenu />\r\n                </MDBNavbarItem>\r\n              </MDBNavbarNav>\r\n\r\n              <SearchBar />\r\n\r\n              <FaveSideBar />\r\n            </MDBCollapse>\r\n          </MDBContainer>\r\n        </MDBNavbar>\r\n\r\n        <MDBContainer className='mx-0 px-0' fluid>\r\n          {children}\r\n        </MDBContainer>\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n};\r\n\r\nconst navBarWithSwitch = (CustomSwitch) => {\r\n  return (\r\n    <NavBar>\r\n      <CustomSwitch />\r\n    </NavBar>\r\n  );\r\n};\r\n\r\nexport default navBarWithSwitch;\r\n","export default __webpack_public_path__ + \"static/media/totoro.80bbbb67.gif\";","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport totoroGIF from '../assets/totoro.gif';\r\n\r\nconst DivS = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 80vh;\r\n`;\r\n\r\nconst ImgS = styled.img`\r\n  width: 14rem;\r\n`;\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <>\r\n      <DivS>\r\n        <ImgS src={totoroGIF} alt='Loading animation' />\r\n        <h1 className='text-center'>LOADING....</h1>\r\n      </DivS>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n// import _ from 'lodash';\r\nimport Loading from './Loading';\r\n\r\nimport YouTube from 'react-youtube';\r\n\r\nimport { MDBContainer, MDBRow, MDBCol, MDBCardTitle } from 'mdb-react-ui-kit';\r\nimport styled from 'styled-components';\r\n\r\nimport { useGetMovieByIdQuery } from '../store/services/ghibliApi';\r\n\r\nconst DivS = (props) => {\r\n  const { movie, className, children } = props;\r\n  const DivStyled = styled.div`\r\n    background-image: url(${movie.posterImage}), linear-gradient(to right, #2e2e2e, #ffffff);\r\n    min-height: 86vh;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-blend-mode: multiply;\r\n  `;\r\n  return <DivStyled className={className} children={children}></DivStyled>;\r\n};\r\n\r\nconst MovieDetails = () => {\r\n  const { mid } = useParams();\r\n  const { data: movie, error, isLoading } = useGetMovieByIdQuery(mid);\r\n\r\n  const opts = {\r\n    height: '330',\r\n    width: '460',\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const onReady = (e) => {\r\n    e.target.pauseVideo();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Loading />\r\n      ) : error ? (\r\n        <p>{error.data.message}</p>\r\n      ) : (\r\n        <>\r\n          <MDBContainer className='text-white p-0' fluid>\r\n            <DivS movie={movie}>\r\n              <MDBRow>\r\n                <MDBCol className=''>\r\n                  <MDBCol className='white-text '>\r\n                    <MDBCol className='py-5'>\r\n                      <MDBCardTitle className='h1-responsive m-5 font-weight-bold'>{movie.title}</MDBCardTitle>\r\n                      <MDBRow>\r\n                        <MDBCol lg='6' className='p-0'>\r\n                          <p className='mx-5 mb-4'>{movie.description}</p>\r\n                          <MDBRow className='mx-5'>\r\n                            <MDBCol>\r\n                              <p>\r\n                                <span className='font-weight-bold text-nowrap'>Directed By</span>\r\n                                <br />\r\n                                {movie.director}\r\n                              </p>\r\n                            </MDBCol>\r\n                            <MDBCol>\r\n                              <p>\r\n                                <span className='font-weight-bold  text-nowrap'>Released Year</span>\r\n                                <br />\r\n                                {movie.releaseYear}\r\n                              </p>\r\n                            </MDBCol>\r\n                            <MDBCol>\r\n                              <p>\r\n                                <span className='font-weight-bold'> Runtime </span>\r\n                                <br />\r\n                                {movie.runningTime}\r\n                              </p>\r\n                            </MDBCol>\r\n                          </MDBRow>\r\n                        </MDBCol>\r\n\r\n                        <MDBCol lg='6' className='text-center'>\r\n                          <YouTube\r\n                            videoId={movie.trailer.youtubeVideoId}\r\n                            opts={opts}\r\n                            onReady={onReady}\r\n                            className='px-0'\r\n                          />\r\n                        </MDBCol>\r\n                      </MDBRow>\r\n                    </MDBCol>\r\n                  </MDBCol>\r\n                </MDBCol>\r\n              </MDBRow>\r\n            </DivS>\r\n          </MDBContainer>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieDetails;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport styled from 'styled-components';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { flip, selectFave } from '../store/faveSlice';\r\n\r\nimport { MDBIcon } from 'mdb-react-ui-kit';\r\n\r\nconst MDBIconS = styled(MDBIcon)`\r\n  cursor: pointer;\r\n  &:hover {\r\n    transform: scale(1.2);\r\n    transition-duration: 0.2s;\r\n  }\r\n`;\r\n\r\nconst Fave = ({ id }) => {\r\n  const { fave } = useSelector(selectFave(id)) ?? { fave: false };\r\n  const dispatch = useDispatch();\r\n\r\n  const handleFaveClick = () => {\r\n    dispatch(flip(id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MDBIconS\r\n        icon='heart'\r\n        size='2x'\r\n        className='ms-4'\r\n        color={fave ? 'danger' : 'transparent'}\r\n        onClick={handleFaveClick}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Fave;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// import { useGetAllMovieByIdQuery } from '../store/services/ghibliApi';\r\n\r\nimport { MDBCard, MDBCardImage, MDBRipple, MDBCardText, MDBCardBody, MDBIcon } from 'mdb-react-ui-kit';\r\n\r\nimport Fave from './Fave';\r\n\r\nconst MovieCard = (props) => {\r\n  // const { data } = useGetAllMovieByIdQuery('all');\r\n  const {\r\n    movie: { id, title, summary, profileImage, rank, releaseYear },\r\n  } = props;\r\n\r\n  const detailsPath = `/ghibli-viewer/movie/${id}`;\r\n\r\n  return (\r\n    <>\r\n      <div className='py-3'>\r\n        <MDBCard style={{ maxWidth: '17rem' }} className='mx-auto'>\r\n          <Link to={detailsPath}>\r\n            <MDBRipple rippleColor='light' rippleTag='div' className='bg-image hover-overlay'>\r\n              <MDBCardImage src={profileImage} alt={title} fluid />\r\n              <div\r\n                className='mask d-flex justify-content-center align-items-center px-3'\r\n                style={{ backgroundColor: 'rgba(0, 0, 0, 0.5)' }}\r\n              >\r\n                <span className='text-white'>{summary}</span>\r\n              </div>\r\n            </MDBRipple>\r\n          </Link>\r\n          <MDBCardBody className='py-0' style={{ backgroundColor: '#26A69A' }}>\r\n            <MDBCardText className='py-2' style={{ whiteSpace: 'nowrap' }}>\r\n              <span className='d-flex align-items-center'>\r\n                <span className='me-3'>\r\n                  <MDBIcon fas icon='crown' size='lg' color='warning' />\r\n                  &nbsp;\r\n                  {rank}\r\n                </span>\r\n                <span>\r\n                  <MDBIcon fas icon='video' size='lg' style={{ color: '#607D8B' }} />\r\n                  &nbsp;\r\n                  <span>{releaseYear}</span>\r\n                </span>\r\n                <span className='ms-4'>\r\n                  <Fave id={id} />\r\n                </span>\r\n              </span>\r\n            </MDBCardText>\r\n          </MDBCardBody>\r\n        </MDBCard>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default MovieCard;\r\n","import React from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport { MDBContainer, MDBRow, MDBCol } from 'mdb-react-ui-kit';\r\nimport _ from 'lodash';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Loading from './Loading';\r\n\r\nimport { useSearchMoviesQuery } from '../store/services/ghibliApi';\r\nimport MovieCard from './MovieCard';\r\nimport { reset, selectFaveCount } from '../store/faveSlice';\r\n\r\nconst MovieGrid = () => {\r\n  const { keyword, cid } = useParams();\r\n  const location = useLocation();\r\n  const { data: movies, error, isLoading } = useSearchMoviesQuery({ keyword, cid });\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const sort = searchParams.get('sort');\r\n\r\n  const dispatch = useDispatch();\r\n  const faveCount = useSelector(selectFaveCount);\r\n\r\n  let iteratee;\r\n  let order;\r\n\r\n  if (sort === 'newest') {\r\n    iteratee = 'releaseYear';\r\n    order = 'desc';\r\n  } else if (sort === 'oldest') {\r\n    iteratee = 'releaseYear';\r\n    order = 'asc';\r\n  } else if (sort === 'rank') {\r\n    iteratee = 'rank';\r\n    order = 'asc';\r\n  } else {\r\n    iteratee = 'id';\r\n    order = 'asc';\r\n  }\r\n\r\n  if (!isLoading && !error && faveCount === 0) {\r\n    const total = movies.length;\r\n    dispatch(reset(total));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <>\r\n          <Loading />\r\n        </>\r\n      ) : error ? (\r\n        <p>{error.data.message}</p>\r\n      ) : (\r\n        <>\r\n          <MDBContainer fluid>\r\n            <MDBContainer>\r\n              <MDBRow>\r\n                {_.orderBy(movies, [iteratee], [order]).map((movie) => (\r\n                  <MDBCol key={`col-${movie.id}`} lg='3' md='6' sm='6'>\r\n                    <MovieCard movie={movie} />\r\n                  </MDBCol>\r\n                ))}\r\n              </MDBRow>\r\n            </MDBContainer>\r\n          </MDBContainer>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieGrid;\r\n","export default __webpack_public_path__ + \"static/media/not-found.1860ad2e.gif\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport NotFoundGIF from '../assets/not-found.gif';\r\n\r\nconst DivS = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 70vh;\r\n`;\r\n\r\nconst ImgS = styled.img`\r\n  width: 18rem;\r\n`;\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <>\r\n      <DivS>\r\n        <div className='text-center'>\r\n          <ImgS src={NotFoundGIF} alt='Not Found Animation' />\r\n          <h1 className='text-center pt-5'>Page is not found.</h1>\r\n        </div>\r\n      </DivS>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nimport MovieDetails from '../components/MovieDetails';\r\nimport MovieGrid from '../components/MovieGrid';\r\nimport NotFound from '../components/NotFound';\r\n\r\nconst CustomSwitch = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path='/ghibli-viewer/'>\r\n        <MovieGrid />\r\n      </Route>\r\n\r\n      <Route path='/ghibli-viewer/category/:cid'>\r\n        <MovieGrid />\r\n      </Route>\r\n\r\n      <Route path='/ghibli-viewer/search/:keyword'>\r\n        <MovieGrid />\r\n      </Route>\r\n\r\n      <Route path='/ghibli-viewer/search'>\r\n        <Redirect to='/ghibli-viewer' />\r\n      </Route>\r\n\r\n      <Route path='/ghibli-viewer/movie/:mid'>\r\n        <MovieDetails />\r\n      </Route>\r\n\r\n      <Route exact path='/ghibli-viewer/notfound'>\r\n        <NotFound />\r\n      </Route>\r\n\r\n      <Route path='/ghibli-viewer/'>\r\n        <Redirect to='/ghibli-viewer/notfound' />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default CustomSwitch;\r\n","import React from 'react';\r\n\r\nimport navBarWithSwitch from './components/NavBar';\r\nimport CustomSwitch from './switch';\r\n\r\nconst App = () => <div className='App'>{navBarWithSwitch(CustomSwitch)}</div>;\r\n\r\nexport default App;\r\n","import { Provider } from 'react-redux';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'mdb-react-ui-kit/dist/css/mdb.min.css';\r\nimport './index.css';\r\nimport { store } from './store/store';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}